name: Release test ESP-IDF

on:
  workflow_call:
    inputs:
      hil_board:
        required: true
        type: string
      idf_target:
        required: true
        type: string
      api-url:
        description: "API gateway URL for Golioth backend services"
        required: false
        type: string
        default: "https://api.golioth.io"
      api-key-id:
        description: >-
          Name of GitHub secret containing an API key that will be used to authenticate with the
          Golioth backend
        required: false
        type: string
        default: "PROD_CI_PROJECT_API_KEY"
      coap_gateway_url:
        description: "The CoAP gateway URL to be hardcoded into test firmware"
        required: false
        type: string
        default: "coaps://coap.golioth.io"
      ci_project_name:
        description: "The name of the Golioth Project to use for certificate generation"
        required: false
        type: string
        default: "firmware_ci"

jobs:
  rand_name:
    runs-on: ubuntu-latest
    name: esp-idf-device-name

    outputs:
      device_name: ${{ steps.generate-name.outputs.device_name }}

    steps:
      - name: Generate device name
        id: generate-name
        shell: python
        run: |
          import random
          import os
          import string

          random_string = ''.join(random.choice(string.ascii_lowercase + string.digits)
                                  for _ in range(16))

          device_name = f'esp-idf-{random_string}'
          print(f"Device name is: {device_name}")

          with open(os.environ['GITHUB_OUTPUT'], 'a') as github_output:
            print(f'device_name={device_name}', file=github_output)

  build:
    name: Build ESP-IDF certificate-auth
    runs-on: ubuntu-latest
    needs: rand_name

    steps:
      - name: Checkout Repository and Submodules
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Prep for build
        id: build_prep
        run: |
          rm -rf test_binaries
          mkdir test_binaries

      - name: Generate certificates
        env:
          DEVICE_NAME: ${{ needs.rand_name.outputs.device_name }}
        shell: bash
        run: |
          scripts/certificates/generate_root_certificate.sh
          scripts/certificates/generate_device_certificate.sh "${{ inputs.ci_project_name }}" "$DEVICE_NAME" pem

      - name: Stage certificates
        run: |
          mkdir examples/esp_idf/certificate_auth/main/certs
          mv golioth.crt.pem examples/esp_idf/certificate_auth/main/certs/.
          mv golioth.key.pem examples/esp_idf/certificate_auth/main/certs/.
          mv *.crt.pem examples/esp_idf/certificate_auth/main/certs/client.crt.pem
          mv *.key.pem examples/esp_idf/certificate_auth/main/certs/client.key.pem

      - name: Build Samples
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: v5.3
          target: ${{ inputs.idf_target }}
          command: |
            echo CONFIG_GOLIOTH_COAP_HOST_URI=\"${{ inputs.coap_gateway_url }}\" \
              >> examples/esp_idf/certificate_auth/sdkconfig.defaults && \
              idf.py -C examples/esp_idf/certificate_auth/ build

      - name: Stage Artifacts
        run: |
          rm -rf artifacts
          mkdir artifacts
          cp examples/esp_idf/certificate_auth/main/certs/golioth.crt.pem artifacts/.
          cp examples/esp_idf/certificate_auth/build/merged.bin artifacts/.

      - name: Save Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.hil_board }}-release-esp-idf
          path: artifacts/*

  test:
    name: Test ESP-IDF certificate-auth
    needs:
      - rand_name
      - build
    runs-on:
      - is_active
      - has_${{ inputs.hil_board }}
    timeout-minutes: 30

    container:
      image: golioth/golioth-hil-base:3407412
      volumes:
        - /dev:/dev
        - /home/golioth/credentials:/opt/credentials
      options: --privileged

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python dependencies
        run: |
          pip install \
            pytest \
            pytest-timeout \
            tests/hil/scripts/pytest-hil \
            git+https://github.com/golioth/python-golioth-tools@v0.6.3

      - name: Power On USB Hub
        run: python3 /opt/golioth-scripts/usb_hub_power.py on

      - name: Download build and cert
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.hil_board }}-release-esp-idf
          path: .

      - name: Run test
        shell: bash
        env:
          hil_board: ${{ inputs.hil_board }}
          DEVICE_NAME: ${{ needs.rand_name.outputs.device_name }}
        run: |
          echo "Device name: ${DEVICE_NAME}"
          rm -rf allure-reports
          source /opt/credentials/runner_env.sh
          PORT_VAR=CI_${hil_board^^}_PORT
          pytest --rootdir . examples/esp_idf/certificate_auth/pytest         \
            --board ${{ inputs.hil_board }}_espidf                            \
            --port ${!PORT_VAR}                                               \
            --fw-image merged.bin                                             \
            --api-url ${{ inputs.api-url }}                                   \
            --api-key ${{ secrets[inputs.api-key-id] }}                       \
            --wifi-ssid ${{ secrets[format('{0}_WIFI_SSID', runner.name)] }}  \
            --wifi-psk ${{ secrets[format('{0}_WIFI_PSK', runner.name)] }}    \
            --mask-secrets                                                    \
            --timeout=600                                                     \
            --device-name=${DEVICE_NAME}                                        \
            --root-certificate=golioth.crt.pem
